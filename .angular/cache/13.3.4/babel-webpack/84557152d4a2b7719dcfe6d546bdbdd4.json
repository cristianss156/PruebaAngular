{"ast":null,"code":"import { of } from 'rxjs';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport let IvaService = /*#__PURE__*/(() => {\n  class IvaService {\n    constructor(http, messageService) {\n      this.http = http;\n      this.messageService = messageService; // private ivasUrl = 'http://localhost/html/demo-angular/php/listIva.php';\n\n      this.ivasUrl = '../listIva.php';\n    }\n\n    getIva(a) {\n      const params = new HttpParams().set('q', \"1\").set('id', `${a}`);\n      return this.http.get(this.ivasUrl, {\n        params\n      }).pipe(tap(_ => this.log(`fetched iva id=${a}`)), catchError(this.handleError(`getIva id=${a}`)));\n    }\n\n    getIvas() {\n      const params = new HttpParams().set('q', \"2\");\n      return this.http.get(this.ivasUrl, {\n        params\n      }).pipe(tap(_ => this.log('fetched ivas')), catchError(this.handleError('getIvas', [])));\n    }\n\n    log(message) {\n      this.messageService.add(`IvaService: ${message}`);\n    }\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        console.error(error);\n        this.log(`${operation} failed: ${error.message}`);\n        return of(result);\n      };\n    }\n\n    updateIva(iva) {\n      const params = new HttpParams().set('q', \"3\").set('id', `${iva.id}`).set('valor', `${iva.valor}`).set('tipo', `${iva.tipo}`);\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        }),\n        params\n      };\n      return this.http.put(this.ivasUrl, iva, httpOptions).pipe(tap(_ => this.log(`update iva id=${iva.id}`)), catchError(this.handleError('updateIva')));\n    }\n\n    addIva(iva) {\n      const params = new HttpParams().set('q', \"4\").set('valor', `${iva.valor}`).set('tipo', `${iva.tipo}`);\n      return this.http.get(this.ivasUrl, {\n        params\n      }).pipe(tap(newIva => this.log(`Añadido nuevo iva con id=${newIva.id}`)), catchError(this.handleError('addIva')));\n    }\n\n    deleteIva(iva) {\n      const id = typeof iva === 'number' ? iva : iva.id;\n      const params = new HttpParams().set('q', \"5\").set('id', `${id}`);\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        }),\n        params\n      };\n      return this.http.delete(this.ivasUrl, httpOptions).pipe(tap(_ => this.log(`Iva borrado id=${id}`)), catchError(this.handleError('deleteIva')));\n    }\n\n    searchIva(term) {\n      if (!term.trim()) {\n        return of([]);\n      }\n\n      const params = new HttpParams().set('q', \"6\").set('tipo', `${term}`);\n      return this.http.get(this.ivasUrl, {\n        params\n      }).pipe(tap(_ => this.log(`Iva que coincide con \"${term}\"`)), catchError(this.handleError('searchIva', [])));\n    }\n\n  }\n\n  IvaService.ɵfac = function IvaService_Factory(t) {\n    return new (t || IvaService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n  };\n\n  IvaService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: IvaService,\n    factory: IvaService.ɵfac,\n    providedIn: 'root'\n  });\n  return IvaService;\n})();","map":null,"metadata":{},"sourceType":"module"}